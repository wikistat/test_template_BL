{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Data Science Machine Learning Course Summary The aim of this course is to introduce the supervised learning techniques most commonly used in data science for many fields of application: industrial applications, marketing, insurance, biology, medicine ... The main objective is to built a model for forecasting and therefore to search for optimal models for different classical statistical algorithms such as linear or generalized linear models, discriminant analysis, less classical : penalized regression, binary decision trees or even so-called Machine Learning algorithms : Classification And Regression Trees, Random Forests, Neural Networks, Support Vector Machines, Boosting ... Knowledge requirements R Tutorial Python Tutorial Elementary statistic tools Data Exploration and Clustering . Machine Learning Tutorials ML Practical Tutorials","title":"Home"},{"location":"index.html#machine-learning-course","text":"","title":"Machine Learning Course"},{"location":"index.html#summary","text":"The aim of this course is to introduce the supervised learning techniques most commonly used in data science for many fields of application: industrial applications, marketing, insurance, biology, medicine ... The main objective is to built a model for forecasting and therefore to search for optimal models for different classical statistical algorithms such as linear or generalized linear models, discriminant analysis, less classical : penalized regression, binary decision trees or even so-called Machine Learning algorithms : Classification And Regression Trees, Random Forests, Neural Networks, Support Vector Machines, Boosting ...","title":"Summary"},{"location":"index.html#knowledge-requirements","text":"R Tutorial Python Tutorial Elementary statistic tools Data Exploration and Clustering .","title":"Knowledge requirements"},{"location":"index.html#machine-learning-tutorials","text":"ML Practical Tutorials","title":"Machine Learning Tutorials"},{"location":"Introduction.html","text":"Introduction","title":"Introduction"},{"location":"Introduction.html#introduction","text":"","title":"Introduction"},{"location":"Risk.html","text":"Risk estimation and Model Selection","title":"Risk estimation and Model Selection"},{"location":"Risk.html#risk-estimation-and-model-selection","text":"","title":"Risk estimation and Model Selection"},{"location":"course1.html","text":"Course 1: Writing maths in markdown In the following example, we will write some maths in a markdown file. And many things can be done with it. test $$ \\begin{aligned} \\frac{\\partial L}{\\partial \\theta} &= \\frac{\\partial L}{\\partial \\hat{y}} \\frac{\\partial \\hat{y}}{\\partial \\theta} \\ &= \\frac{\\partial L}{\\partial \\hat{y}} (x_1 \\sigma_1 + x_2 \\sigma_2 + x_6\\sigma_3) \\end{aligned} $$ Embedding an image in a markdown file In the following example, we will embed an image in a markdown file. From an local image Frome an external source: Embedding a video in a markdown file In the following example, we will embed a video in a markdown file. Embedding a pdf in a markdown file In the following example, we will embed a pdf file in a markdown file. This is useful for example to embed a pdf version of a presentation.","title":"Course 1:"},{"location":"course1.html#course-1","text":"","title":"Course 1:"},{"location":"course1.html#writing-maths-in-markdown","text":"In the following example, we will write some maths in a markdown file. And many things can be done with it. test $$ \\begin{aligned} \\frac{\\partial L}{\\partial \\theta} &= \\frac{\\partial L}{\\partial \\hat{y}} \\frac{\\partial \\hat{y}}{\\partial \\theta} \\ &= \\frac{\\partial L}{\\partial \\hat{y}} (x_1 \\sigma_1 + x_2 \\sigma_2 + x_6\\sigma_3) \\end{aligned} $$","title":"Writing maths in markdown"},{"location":"course1.html#embedding-an-image-in-a-markdown-file","text":"In the following example, we will embed an image in a markdown file. From an local image Frome an external source:","title":"Embedding an image in a markdown file"},{"location":"course1.html#embedding-a-video-in-a-markdown-file","text":"In the following example, we will embed a video in a markdown file.","title":"Embedding a video in a markdown file"},{"location":"course1.html#embedding-a-pdf-in-a-markdown-file","text":"In the following example, we will embed a pdf file in a markdown file. This is useful for example to embed a pdf version of a presentation.","title":"Embedding a pdf in a markdown file"},{"location":"course2a.html","text":"Course 2: Example of a markdown file Practical Session In this practical session, you will now run your code through a Docker container. Using docker in data science projects has two advantages: Improving the reproducibility of the results Facilitating the portability and deployment In this session, we will try to package the code from our Gradio applications, allowing us to predict digits labels and to colorize images into a Docker image. We will then use this image to instantiate a container that could be hosted on any physical device to run the app. We will first create the Dockerfile corresponding to our environment. On your local machine, create a new file named Dockerfile containing the following code: # Base image from pytorch FROM pytorch/pytorch # Set up for your local zone an UTC information ENV TZ=Europe/Paris RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone # Additional librairies RUN pip install gradio tensorboard RUN pip install markupsafe==2.0.1 Take a moment to analyze this dockerfile. As you can see, it is built upon an existing image from Pytorch. Starting from existing images allows for fast prototyping. You may find existing images on DockerHub . The Pytorch image we will be using is available here . If docker is not already installed in your machine, follow this guide to install it. You may now build your first image using the following command: sudo docker build -t [your_image_name] [path_to_your_dockerfile] The image should take a few minutes to build. Once it is done, use the following command to list the available images on your device: sudo docker image ls How many images can you see? What do they refer to? Now that our images are built, we can use them to instantiate containers. Since a container is an instance of an image, we can instantiate several containers using a single image. We will run our first container using the interactive mode. Run the following command to run your fist container: docker run -it --name [your_container_name] [your_image_name] You should now have access to an interactive terminal within your container. On this terminal, open a Python console and check that Pytorch is installed. import torch print(torch.__version__) Quit the Python console and quit your container using ctrl+d . You can list all your running containers using the following command: sudo docker container ls Your container is closed and does not appear. To list all the existing containers, add the -a to the previous command. sudo docker container ls -a Start your containers using: sudo docker start [container_id_or_name] Check that it is now listed as started. You can have access to its interactive mode using the attach command: sudo docker attach [container_id_or_name] You can delete a container using the rm command: sudo docker rm [container_id_or_name] We will now see how to share data between the container and the machine it is running on. First create a folder containing the files: colorize_app.py mnist_app.py mnist.pth unet.pth Create a new container, this time mounting a shared volume with the following command: docker run -it --name [container_name] -v ~/[absolute_path_to_your_folder_to_share]:/workspace/[folder_name_in_the_container] [image_name] for instance: docker run -it --name my_container_name -v ~/workspace/colorize:/workspace/colorize_container my_image_name Try to run one of your Gradio applications using the interactive mode. cd [folder_name] python colorize_app.py Leave the container and look at your folder on your local machine. What can you see? Now try to run your applications on your cloud instance. Send the Dockerfile and the folder containing your applications to your cloud instance. On the cloud instance, build your image and run your container and your app in background mode. sudo docker exec -t my_container_name python ./colorize_container/colorize_app.py --weights_path ./colorize_container/unet.pth That's it! You have deployed a machine learning application on a cloud machine it is now accessible from everywhere. Send the url to one of your classmate and ask him/her to test your app. This is it for this session. Please remember to shutdown your cloud machine with the command: sudo shutdown -h now Do not hesitate to play a little more with Docker. For instance try to train the MNIST classifier directly in your container and to collect the tensorboard logs and the resulting weights on your local machine.","title":"Course 2:"},{"location":"course2a.html#course-2","text":"","title":"Course 2:"},{"location":"course2a.html#example-of-a-markdown-file","text":"","title":"Example of a markdown file"},{"location":"course2a.html#practical-session","text":"In this practical session, you will now run your code through a Docker container. Using docker in data science projects has two advantages: Improving the reproducibility of the results Facilitating the portability and deployment In this session, we will try to package the code from our Gradio applications, allowing us to predict digits labels and to colorize images into a Docker image. We will then use this image to instantiate a container that could be hosted on any physical device to run the app. We will first create the Dockerfile corresponding to our environment. On your local machine, create a new file named Dockerfile containing the following code: # Base image from pytorch FROM pytorch/pytorch # Set up for your local zone an UTC information ENV TZ=Europe/Paris RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone # Additional librairies RUN pip install gradio tensorboard RUN pip install markupsafe==2.0.1 Take a moment to analyze this dockerfile. As you can see, it is built upon an existing image from Pytorch. Starting from existing images allows for fast prototyping. You may find existing images on DockerHub . The Pytorch image we will be using is available here . If docker is not already installed in your machine, follow this guide to install it. You may now build your first image using the following command: sudo docker build -t [your_image_name] [path_to_your_dockerfile] The image should take a few minutes to build. Once it is done, use the following command to list the available images on your device: sudo docker image ls How many images can you see? What do they refer to? Now that our images are built, we can use them to instantiate containers. Since a container is an instance of an image, we can instantiate several containers using a single image. We will run our first container using the interactive mode. Run the following command to run your fist container: docker run -it --name [your_container_name] [your_image_name] You should now have access to an interactive terminal within your container. On this terminal, open a Python console and check that Pytorch is installed. import torch print(torch.__version__) Quit the Python console and quit your container using ctrl+d . You can list all your running containers using the following command: sudo docker container ls Your container is closed and does not appear. To list all the existing containers, add the -a to the previous command. sudo docker container ls -a Start your containers using: sudo docker start [container_id_or_name] Check that it is now listed as started. You can have access to its interactive mode using the attach command: sudo docker attach [container_id_or_name] You can delete a container using the rm command: sudo docker rm [container_id_or_name] We will now see how to share data between the container and the machine it is running on. First create a folder containing the files: colorize_app.py mnist_app.py mnist.pth unet.pth Create a new container, this time mounting a shared volume with the following command: docker run -it --name [container_name] -v ~/[absolute_path_to_your_folder_to_share]:/workspace/[folder_name_in_the_container] [image_name] for instance: docker run -it --name my_container_name -v ~/workspace/colorize:/workspace/colorize_container my_image_name Try to run one of your Gradio applications using the interactive mode. cd [folder_name] python colorize_app.py Leave the container and look at your folder on your local machine. What can you see? Now try to run your applications on your cloud instance. Send the Dockerfile and the folder containing your applications to your cloud instance. On the cloud instance, build your image and run your container and your app in background mode. sudo docker exec -t my_container_name python ./colorize_container/colorize_app.py --weights_path ./colorize_container/unet.pth That's it! You have deployed a machine learning application on a cloud machine it is now accessible from everywhere. Send the url to one of your classmate and ask him/her to test your app. This is it for this session. Please remember to shutdown your cloud machine with the command: sudo shutdown -h now Do not hesitate to play a little more with Docker. For instance try to train the MNIST classifier directly in your container and to collect the tensorboard logs and the resulting weights on your local machine.","title":"Practical Session"},{"location":"course2b.html","text":"Course 2-b : Add external notebooks Practical sessions: Policy iteration and Value Iteration Q-learning Deep Q-learning","title":"Course 2-b :"},{"location":"course2b.html#course-2-b","text":"","title":"Course 2-b :"},{"location":"course2b.html#add-external-notebooks","text":"Practical sessions: Policy iteration and Value Iteration Q-learning Deep Q-learning","title":"Add external notebooks"},{"location":"evaluation.html","text":"Evaluation The evaluation is composed of a written exam (50 %) and a project (50 %). Written exam The objective is to check your level of understanding of the course. The handout is allowed during the exam. Here are some examples of exam subjects : - Exam 2022 Project The project is done in groups of 4 people. You will have to analyze a dataset. You will be evaluated on your capacity of acting like a Data Scientist , i.e. Providing an exploratory analysis. Create new features. Write a complete pipeline to train and test your models. Justify your modelisation choices. Interpret your results. Work in group. Share it and make your results easily reproducible with R and Python notebooks. Write a report.","title":"Evaluation"},{"location":"evaluation.html#evaluation","text":"The evaluation is composed of a written exam (50 %) and a project (50 %).","title":"Evaluation"},{"location":"evaluation.html#written-exam","text":"The objective is to check your level of understanding of the course. The handout is allowed during the exam. Here are some examples of exam subjects :","title":"Written exam"},{"location":"evaluation.html#-exam-2022","text":"","title":"- Exam 2022"},{"location":"evaluation.html#project","text":"The project is done in groups of 4 people. You will have to analyze a dataset. You will be evaluated on your capacity of acting like a Data Scientist , i.e. Providing an exploratory analysis. Create new features. Write a complete pipeline to train and test your models. Justify your modelisation choices. Interpret your results. Work in group. Share it and make your results easily reproducible with R and Python notebooks. Write a report.","title":"Project"},{"location":"lectures.html","text":"Machine Learning Lectures Slides : Introduction Risk estimation and Model Selection Linear Models Model selection for linear models Linear methods for classification, Linear SVM Kernel methods : SVM and SVR Classification and Regression Trees Aggregation and Random Forests Aggregation by Boosting Algorithms Neural Networks and Introduction to Deep Learning Imputation of Missing Data Anticiper les Risques juridiques des Syst\u00e8mes d'IA","title":"Lectures"},{"location":"lectures.html#machine-learning-lectures","text":"","title":"Machine Learning Lectures"},{"location":"lectures.html#slides","text":"","title":"Slides :"},{"location":"lectures.html#introduction","text":"","title":"Introduction"},{"location":"lectures.html#risk-estimation-and-model-selection","text":"","title":"Risk estimation and Model Selection"},{"location":"lectures.html#linear-models","text":"","title":"Linear Models"},{"location":"lectures.html#model-selection-for-linear-models","text":"","title":"Model selection for linear models"},{"location":"lectures.html#linear-methods-for-classification-linear-svm","text":"","title":"Linear methods for classification, Linear SVM"},{"location":"lectures.html#kernel-methods-svm-and-svr","text":"","title":"Kernel methods : SVM and SVR"},{"location":"lectures.html#classification-and-regression-trees","text":"","title":"Classification and Regression Trees"},{"location":"lectures.html#aggregation-and-random-forests","text":"","title":"Aggregation and Random Forests"},{"location":"lectures.html#aggregation-by-boosting-algorithms","text":"","title":"Aggregation by Boosting Algorithms"},{"location":"lectures.html#neural-networks-and-introduction-to-deep-learning","text":"","title":"Neural Networks and Introduction to Deep Learning"},{"location":"lectures.html#imputation-of-missing-data","text":"","title":"Imputation of Missing Data"},{"location":"lectures.html#anticiper-les-risques-juridiques-des-systemes-dia","text":"","title":"Anticiper les Risques juridiques des Syst\u00e8mes d'IA"},{"location":"schedule.html","text":"Schedule Lectures : 22,5 hours Tutorials (TD) : 2,5 hours Practical Sessions (TP) : 27,5 hours. Lectures : Introduction : Risk estimation and Model selection :","title":"Schedule"},{"location":"schedule.html#schedule","text":"Lectures : 22,5 hours Tutorials (TD) : 2,5 hours Practical Sessions (TP) : 27,5 hours.","title":"Schedule"},{"location":"schedule.html#lectures","text":"Introduction : Risk estimation and Model selection :","title":"Lectures :"}]}